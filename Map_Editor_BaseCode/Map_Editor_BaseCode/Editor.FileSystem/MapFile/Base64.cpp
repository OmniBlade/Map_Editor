#include "stdafx.h"
#include "Base64.hpp"
#include "../../Utils.hpp"
#include <iostream>

Base64::Base64()
{

}

Base64::~Base64() 
{

}

void Base64::initialiseTable() {
	static bool initialised = false;
	if (initialised) {
		return;
	}
	std::cout << "Intialising Base64 table" << std::endl;
	for (unsigned int i = 0; i != 64; i++) {
		lookup[alphabet[i]] = i;
	}
	lookup['='] = 0;
	initialised = true;
}

unsigned int Base64::decode64Chunk(byte const* in, byte* out) {
	unsigned int bytes = 3;
	unsigned int accum = 0;
	byte sixbits;
	bool padCheck = false;
	for (unsigned int i = 0; i != 4; i++) {
		if (in[i] == '=') {
			bytes--;
			padCheck = true;
		}
		else if (padCheck) {
			//throw EXCEPTION("Padding is incorrect, character 0x%02X follows '='", in[i]);
			std::cout << "Padding is incorrect, character " << in[i] << " follows '='" << std::endl;
		}
		sixbits = lookup[in[i]];
		if (sixbits & 0xC0) {
			//throw EXCEPTION("Invalid Base64 character 0x%02X (%c) detected in input, decodes to 0x%02X", in[i], in[i], sixbits);
			std::cout << "Invalid Base64 character 0x%02X (%c) detected in input, decodes to 0x%02X" << std::endl;
		}
		accum <<= 6;
		accum |= sixbits;
	}
	if (bytes == 0 || bytes > 3) {
		std::cout << "Corrupted Base64 encoded data - seems to be more than 2 trailing padding '='" << std::endl;
	}
	out[0] = (accum & 0x00FF0000) >> 16;
	if (bytes > 1) {
		out[1] = (accum & 0x0000FF00) >> 8;
		if (bytes > 2) {
			out[2] = (accum & 0x000000FF);
		}
	}
	return bytes;
}

size_t Base64::decode(byte* inout, size_t len) 
{
	return decode(inout, inout, len);
}

size_t Base64::decode(byte const* in, byte* out, size_t len) {
	initialiseTable();
	byte const* b64Pos = in;
	byte* decPos = out;
	unsigned int num;
	if (len % 4 != 0) {
		//throw EXCEPTION("Base64 encoded data must be a multiple of 4 bytes long, this buffer is %u long", len);
		std::cout << "Base64 encoded data must be a multiple of 4 bytes long, this buffer is " << len << " long" << std::endl;
	}
	while (b64Pos != in + len) {
		num = decode64Chunk(b64Pos, decPos);
		b64Pos += 4;
		decPos += 3;
	}
	return decPos - out - (3 - num);
}

byte* Base64::decode(INISection& ini, size_t& len) {
	std::string b64;
	for (unsigned int key = 1; ini.checkKeyExistance(Utils::toString(key)); key++) {
		b64 += ini.getKey(Utils::toString(key));
	}
	if (b64.length() % 4) {
		std::cout << "Data from INI file is not a multiple of 4 bytes long (is" << b64.length() << " long)" << std::endl;
		//throw EXCEPTION("Data from INI file is not a multiple of 4 bytes long (is %u long)", b64.length());
	}
	byte* buf = new byte[(b64.length() / 4) * 3];
	len = decode(reinterpret_cast<byte const*>(b64.c_str()), buf, b64.length());
	return buf;
}

byte Base64::alphabet[64] = 
{
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
	'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
	'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
};

byte Base64::lookup[256] = 
{
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};